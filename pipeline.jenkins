#!groovy

pipeline {
    agent {
        label 'master'
    }
    triggers { pollSCM('* * * * *') }
    environment {
        workspace="${WORKSPACE}/${env.BUILD_NUMBER}"
   
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    parameters {
        choice(choices: "master\ndevelop", description: 'BRANCH', name: 'BRANCH')
        string(defaultValue: "alianinho", description: 'Image name name', name: 'IMAGE')
    }

    stages {
//         stage("Clone repo") {
//             steps {
//                 git credentialsId: '05e830ed-8f0b-4119-84ef-1667153f0bc5', url: 'https://github.com/alianinhoaws/Jenkins.git'
//                 println "Pulling from branch ${params.BRANCH}"
//             }
//         }
        stage ("directory"){
               steps {
                   ws (env.WORKSPACE){
                   sh "pwd"
                   sh "echo ${env.WORKSPACE_TMP}"
                   sh "ls -la"
                   sh "echo ${env.WORKSPACE}"
                   sh "echo Jenkins home"
                   sh "echo ${JENKINS_HOME}"
                   sh "pwd"
                   }
               }
               }
               
        stage("docker login") {
            steps {
                echo " docker login "
                withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    echo "docker login"
                    """
                }
            }
        }
        stage("create docker image") {
            steps {
                echo "start building image"
                dir ('.') {
                    sh """
                    docker build -t ${params.IMAGE}/student:latest .
                    """
                }
            }
        }
        stage("docker push") {
            steps {
                echo "pushing image"
                sh """
                docker push ${params.IMAGE}/student:latest
                """
            }
        }
    }


post {
//     aborted {}
//     failure { 
//       script {
//         currentBuild.setKeepLog(true)
//       }
//     }
//     success { }
    always {
//       cleanWs disableDeferredWipeout: true, deleteDirs: true
//       /* clean up our custom workspace */
      deleteDir()
      dir("${env.WORKSPACE}") {
          sh "pwd"
        deleteDir()
      }
    }
  }
}
